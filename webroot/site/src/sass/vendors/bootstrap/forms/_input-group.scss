//
// Base styles
//
.checkbox {}

input[type="checkbox"] {
  //display: none;
}

#checkbox-detalhe,
#checkbox-footer {
  display: none;
}

.label {
  display: inline-block;
  width: 15px;
  height: 15px;
  border-radius: 50%;
  //border: 2px solid #3C7EBF;
  border: none;
  margin-right: 20px;
  margin-top: 6px;
  outline: 2px solid #3C7EBF;
}

label {
  display: inline-block;
  width: 20px;
  height: 15px;
  border-radius: 50%;
  border: 2px solid #3C7EBF;
  margin-right: 20px;
  margin-top: 6px;
  outline: 2px solid #fff;
}

input[type="checkbox"]:checked+.label {
  background-color: #3C7EBF;
  border: 3px solid #fff;
  outline: 2px solid #3C7EBF;
}

input[type="checkbox"]:checked+label {
  background-color: #fff;
  border: 3px solid #3C7EBF;
  outline: 2px solid #fff;
}

.newsletter {
  background: rgba(0, 0, 0, 0.25);
  border-radius: 40px;
  border: none !important;
  background-image: url(../images/icones/seta.svg);
  background-repeat: no-repeat;
  background-position: 95%;
  padding: 16px 24px;
  outline: 0;
  color: white;
  font-size: 16px;

  width: 80% !important;


  @media(min-width: 992px) {
    //margin-right: auto;
    margin-right: auto !important;
    width: 80% !important;
  }

  @media(max-width: 992px) {
    margin: auto;
  }

  @media(max-width: 576px) {

    width: 100% !important;
  }

  &::placeholder {
    color: white;
    font-size: 16px;
    font-family: "Poppins";
    font-style: normal;
  }
}

.input-group {
  position: relative;
  display: flex;
  flex-wrap: wrap; // For form validation feedback
  align-items: stretch;
  width: 100%;
  border-radius: 20px;
  border: 1px solid #D9D9D9;
  padding: 16px 26px;

  >.form-control,
  >.form-select {
    position: relative; // For focus state's z-index
    flex: 1 1 auto;
    width: 1%;
    min-width: 0; // https://stackoverflow.com/questions/36247140/why-dont-flex-items-shrink-past-content-size
  }

  // Bring the "active" form control to the top of surrounding elements
  >.form-control:focus,
  >.form-select:focus {
    z-index: 3;
  }

  // Ensure buttons are always above inputs for more visually pleasing borders.
  // This isn't needed for `.input-group-text` since it shares the same border-color
  // as our inputs.
  .btn {
    position: relative;
    z-index: 2;

    &:focus {
      z-index: 3;
    }
  }
}


// Textual addons
//
// Serves as a catch-all element for any text or radio/checkbox input you wish
// to prepend or append to an input.

.input-group-text {
  display: flex;
  align-items: center;
  padding: $input-group-addon-padding-y $input-group-addon-padding-x;
  @include font-size($input-font-size); // Match inputs
  font-weight: $input-group-addon-font-weight;
  line-height: $input-line-height;
  color: $input-group-addon-color;
  text-align: center;
  white-space: nowrap;
  background-color: $input-group-addon-bg;
  border: $input-border-width solid $input-group-addon-border-color;
  @include border-radius($input-border-radius);
}


// Sizing
//
// Remix the default form control sizing classes into new ones for easier
// manipulation.

.input-group-lg>.form-control,
.input-group-lg>.form-select,
.input-group-lg>.input-group-text,
.input-group-lg>.btn {
  padding: $input-padding-y-lg $input-padding-x-lg;
  @include font-size($input-font-size-lg);
  @include border-radius($input-border-radius-lg);
}

.input-group-sm>.form-control,
.input-group-sm>.form-select,
.input-group-sm>.input-group-text,
.input-group-sm>.btn {
  padding: $input-padding-y-sm $input-padding-x-sm;
  @include font-size($input-font-size-sm);
  @include border-radius($input-border-radius-sm);
}

.input-group-lg>.form-select,
.input-group-sm>.form-select {
  padding-right: $form-select-padding-x + $form-select-indicator-padding;
}


// Rounded corners
//
// These rulesets must come after the sizing ones to properly override sm and lg
// border-radius values when extending. They're more specific than we'd like
// with the `.input-group >` part, but without it, we cannot override the sizing.

// stylelint-disable-next-line no-duplicate-selectors
.input-group {
  &:not(.has-validation) {

    > :not(:last-child):not(.dropdown-toggle):not(.dropdown-menu),
    >.dropdown-toggle:nth-last-child(n + 3) {
      @include border-end-radius(0);
    }
  }

  &.has-validation {

    > :nth-last-child(n + 3):not(.dropdown-toggle):not(.dropdown-menu),
    >.dropdown-toggle:nth-last-child(n + 4) {
      @include border-end-radius(0);
    }
  }

  $validation-messages: "";

  @each $state in map-keys($form-validation-states) {
    $validation-messages: $validation-messages + ":not(."+ unquote($state) + "-tooltip)"+ ":not(."+ unquote($state) + "-feedback)";
  }

  > :not(:first-child):not(.dropdown-menu)#{$validation-messages} {
    margin-left: -$input-border-width;
    @include border-start-radius(0);
  }
}